// Generated from grammars/CFloor2.g4 by ANTLR 4.13.1
// ignore_for_file: unused_import, unused_local_variable, prefer_single_quotes
import 'package:antlr4/antlr4.dart';


class CFloor2Lexer extends Lexer {
  static final checkVersion = () => RuntimeMetaData.checkVersion('4.13.1', RuntimeMetaData.VERSION);

  static final List<DFA> _decisionToDFA = List.generate(
        _ATN.numberOfDecisions, (i) => DFA(_ATN.getDecisionState(i), i));
  static final PredictionContextCache _sharedContextCache = PredictionContextCache();
  static const int
    TOKEN_T__0 = 1, TOKEN_T__1 = 2, TOKEN_T__2 = 3, TOKEN_T__3 = 4, TOKEN_T__4 = 5, 
    TOKEN_T__5 = 6, TOKEN_T__6 = 7, TOKEN_T__7 = 8, TOKEN_T__8 = 9, TOKEN_T__9 = 10, 
    TOKEN_T__10 = 11, TOKEN_T__11 = 12, TOKEN_T__12 = 13, TOKEN_T__13 = 14, 
    TOKEN_T__14 = 15, TOKEN_T__15 = 16, TOKEN_Number = 17, TOKEN_MathOperator = 18, 
    TOKEN_StringLiteral = 19, TOKEN_WS = 20, TOKEN_Identifier = 21;
  @override
  final List<String> channelNames = [
    'DEFAULT_TOKEN_CHANNEL', 'HIDDEN'
  ];

  @override
  final List<String> modeNames = [
    'DEFAULT_MODE'
  ];

  @override
  final List<String> ruleNames = [
    'T__0', 'T__1', 'T__2', 'T__3', 'T__4', 'T__5', 'T__6', 'T__7', 'T__8', 
    'T__9', 'T__10', 'T__11', 'T__12', 'T__13', 'T__14', 'T__15', 'Number', 
    'MathOperator', 'StringLiteral', 'WS', 'Identifier'
  ];

  static final List<String?> _LITERAL_NAMES = [
      null, "'int'", "'float'", "'('", "')'", "'floor'", "'ceil'", "'round'", 
      "'sqrt'", "'sin'", "'cos'", "'tan'", "'read_int()'", "'read_float()'", 
      "';'", "'write'", "'='"
  ];
  static final List<String?> _SYMBOLIC_NAMES = [
      null, null, null, null, null, null, null, null, null, null, null, 
      null, null, null, null, null, null, "Number", "MathOperator", "StringLiteral", 
      "WS", "Identifier"
  ];
  static final Vocabulary VOCABULARY = VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

  @override
  Vocabulary get vocabulary {
    return VOCABULARY;
  }


  CFloor2Lexer(CharStream input) : super(input) {
    interpreter = LexerATNSimulator(_ATN, _decisionToDFA, _sharedContextCache, recog: this);
  }

  @override
  List<int> get serializedATN => _serializedATN;

  @override
  String get grammarFileName => 'CFloor2.g4';

  @override
  ATN getATN() { return _ATN; }

  static const List<int> _serializedATN = [
      4,0,21,175,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
      6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
      13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
      7,20,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,
      4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,
      1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
      1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,
      12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,
      1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,16,3,16,127,8,16,1,16,4,16,130,
      8,16,11,16,12,16,131,1,16,3,16,135,8,16,1,16,5,16,138,8,16,10,16,12,
      16,141,9,16,1,16,1,16,4,16,145,8,16,11,16,12,16,146,3,16,149,8,16,
      1,17,1,17,1,18,1,18,5,18,155,8,18,10,18,12,18,158,9,18,1,18,1,18,1,
      19,4,19,163,8,19,11,19,12,19,164,1,19,1,19,1,20,1,20,5,20,171,8,20,
      10,20,12,20,174,9,20,2,146,156,0,21,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
      15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
      19,39,20,41,21,1,0,6,1,0,45,45,1,0,48,57,4,0,37,37,42,43,45,45,47,
      47,3,0,9,10,13,13,32,32,1,0,97,122,2,0,95,95,97,122,183,0,1,1,0,0,
      0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
      1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
      0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
      0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,1,43,1,0,0,
      0,3,47,1,0,0,0,5,53,1,0,0,0,7,55,1,0,0,0,9,57,1,0,0,0,11,63,1,0,0,
      0,13,68,1,0,0,0,15,74,1,0,0,0,17,79,1,0,0,0,19,83,1,0,0,0,21,87,1,
      0,0,0,23,91,1,0,0,0,25,102,1,0,0,0,27,115,1,0,0,0,29,117,1,0,0,0,31,
      123,1,0,0,0,33,148,1,0,0,0,35,150,1,0,0,0,37,152,1,0,0,0,39,162,1,
      0,0,0,41,168,1,0,0,0,43,44,5,105,0,0,44,45,5,110,0,0,45,46,5,116,0,
      0,46,2,1,0,0,0,47,48,5,102,0,0,48,49,5,108,0,0,49,50,5,111,0,0,50,
      51,5,97,0,0,51,52,5,116,0,0,52,4,1,0,0,0,53,54,5,40,0,0,54,6,1,0,0,
      0,55,56,5,41,0,0,56,8,1,0,0,0,57,58,5,102,0,0,58,59,5,108,0,0,59,60,
      5,111,0,0,60,61,5,111,0,0,61,62,5,114,0,0,62,10,1,0,0,0,63,64,5,99,
      0,0,64,65,5,101,0,0,65,66,5,105,0,0,66,67,5,108,0,0,67,12,1,0,0,0,
      68,69,5,114,0,0,69,70,5,111,0,0,70,71,5,117,0,0,71,72,5,110,0,0,72,
      73,5,100,0,0,73,14,1,0,0,0,74,75,5,115,0,0,75,76,5,113,0,0,76,77,5,
      114,0,0,77,78,5,116,0,0,78,16,1,0,0,0,79,80,5,115,0,0,80,81,5,105,
      0,0,81,82,5,110,0,0,82,18,1,0,0,0,83,84,5,99,0,0,84,85,5,111,0,0,85,
      86,5,115,0,0,86,20,1,0,0,0,87,88,5,116,0,0,88,89,5,97,0,0,89,90,5,
      110,0,0,90,22,1,0,0,0,91,92,5,114,0,0,92,93,5,101,0,0,93,94,5,97,0,
      0,94,95,5,100,0,0,95,96,5,95,0,0,96,97,5,105,0,0,97,98,5,110,0,0,98,
      99,5,116,0,0,99,100,5,40,0,0,100,101,5,41,0,0,101,24,1,0,0,0,102,103,
      5,114,0,0,103,104,5,101,0,0,104,105,5,97,0,0,105,106,5,100,0,0,106,
      107,5,95,0,0,107,108,5,102,0,0,108,109,5,108,0,0,109,110,5,111,0,0,
      110,111,5,97,0,0,111,112,5,116,0,0,112,113,5,40,0,0,113,114,5,41,0,
      0,114,26,1,0,0,0,115,116,5,59,0,0,116,28,1,0,0,0,117,118,5,119,0,0,
      118,119,5,114,0,0,119,120,5,105,0,0,120,121,5,116,0,0,121,122,5,101,
      0,0,122,30,1,0,0,0,123,124,5,61,0,0,124,32,1,0,0,0,125,127,7,0,0,0,
      126,125,1,0,0,0,126,127,1,0,0,0,127,129,1,0,0,0,128,130,7,1,0,0,129,
      128,1,0,0,0,130,131,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,149,
      1,0,0,0,133,135,7,0,0,0,134,133,1,0,0,0,134,135,1,0,0,0,135,139,1,
      0,0,0,136,138,7,1,0,0,137,136,1,0,0,0,138,141,1,0,0,0,139,137,1,0,
      0,0,139,140,1,0,0,0,140,142,1,0,0,0,141,139,1,0,0,0,142,144,5,46,0,
      0,143,145,7,1,0,0,144,143,1,0,0,0,145,146,1,0,0,0,146,147,1,0,0,0,
      146,144,1,0,0,0,147,149,1,0,0,0,148,126,1,0,0,0,148,134,1,0,0,0,149,
      34,1,0,0,0,150,151,7,2,0,0,151,36,1,0,0,0,152,156,5,34,0,0,153,155,
      9,0,0,0,154,153,1,0,0,0,155,158,1,0,0,0,156,157,1,0,0,0,156,154,1,
      0,0,0,157,159,1,0,0,0,158,156,1,0,0,0,159,160,5,34,0,0,160,38,1,0,
      0,0,161,163,7,3,0,0,162,161,1,0,0,0,163,164,1,0,0,0,164,162,1,0,0,
      0,164,165,1,0,0,0,165,166,1,0,0,0,166,167,6,19,0,0,167,40,1,0,0,0,
      168,172,7,4,0,0,169,171,7,5,0,0,170,169,1,0,0,0,171,174,1,0,0,0,172,
      170,1,0,0,0,172,173,1,0,0,0,173,42,1,0,0,0,174,172,1,0,0,0,10,0,126,
      131,134,139,146,148,156,164,172,1,6,0,0
  ];

  static final ATN _ATN =
      ATNDeserializer().deserialize(_serializedATN);
}