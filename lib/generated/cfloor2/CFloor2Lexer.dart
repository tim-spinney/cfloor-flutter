// Generated from grammars/CFloor2.g4 by ANTLR 4.13.2
// ignore_for_file: unused_import, unused_local_variable, prefer_single_quotes
import 'package:antlr4/antlr4.dart';


class CFloor2Lexer extends Lexer {
  static final checkVersion = () => RuntimeMetaData.checkVersion('4.13.2', RuntimeMetaData.VERSION);

  static final List<DFA> _decisionToDFA = List.generate(
        _ATN.numberOfDecisions, (i) => DFA(_ATN.getDecisionState(i), i));
  static final PredictionContextCache _sharedContextCache = PredictionContextCache();
  static const int
    TOKEN_T__0 = 1, TOKEN_T__1 = 2, TOKEN_T__2 = 3, TOKEN_T__3 = 4, TOKEN_T__4 = 5, 
    TOKEN_T__5 = 6, TOKEN_T__6 = 7, TOKEN_T__7 = 8, TOKEN_T__8 = 9, TOKEN_T__9 = 10, 
    TOKEN_T__10 = 11, TOKEN_T__11 = 12, TOKEN_T__12 = 13, TOKEN_T__13 = 14, 
    TOKEN_Number = 15, TOKEN_Primitive = 16, TOKEN_MathOperator = 17, TOKEN_StringLiteral = 18, 
    TOKEN_WS = 19, TOKEN_Identifier = 20;
  @override
  final List<String> channelNames = [
    'DEFAULT_TOKEN_CHANNEL', 'HIDDEN'
  ];

  @override
  final List<String> modeNames = [
    'DEFAULT_MODE'
  ];

  @override
  final List<String> ruleNames = [
    'T__0', 'T__1', 'T__2', 'T__3', 'T__4', 'T__5', 'T__6', 'T__7', 'T__8', 
    'T__9', 'T__10', 'T__11', 'T__12', 'T__13', 'Number', 'Primitive', 'MathOperator', 
    'StringLiteral', 'WS', 'Identifier'
  ];

  static final List<String?> _LITERAL_NAMES = [
      null, "'('", "')'", "'floor'", "'ceil'", "'round'", "'sqrt'", "'sin'", 
      "'cos'", "'tan'", "'read_int()'", "'read_float()'", "';'", "'write'", 
      "'='"
  ];
  static final List<String?> _SYMBOLIC_NAMES = [
      null, null, null, null, null, null, null, null, null, null, null, 
      null, null, null, null, "Number", "Primitive", "MathOperator", "StringLiteral", 
      "WS", "Identifier"
  ];
  static final Vocabulary VOCABULARY = VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

  @override
  Vocabulary get vocabulary {
    return VOCABULARY;
  }


  CFloor2Lexer(CharStream input) : super(input) {
    interpreter = LexerATNSimulator(_ATN, _decisionToDFA, _sharedContextCache, recog: this);
  }

  @override
  List<int> get serializedATN => _serializedATN;

  @override
  String get grammarFileName => 'CFloor2.g4';

  @override
  ATN getATN() { return _ATN; }

  static const List<int> _serializedATN = [
      4,0,20,173,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
      6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
      13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,
      1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,
      4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
      1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,
      10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
      1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,3,14,115,8,14,1,14,4,
      14,118,8,14,11,14,12,14,119,1,14,3,14,123,8,14,1,14,5,14,126,8,14,
      10,14,12,14,129,9,14,1,14,1,14,4,14,133,8,14,11,14,12,14,134,3,14,
      137,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,147,8,15,1,16,
      1,16,1,17,1,17,5,17,153,8,17,10,17,12,17,156,9,17,1,17,1,17,1,18,4,
      18,161,8,18,11,18,12,18,162,1,18,1,18,1,19,1,19,5,19,169,8,19,10,19,
      12,19,172,9,19,2,134,154,0,20,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
      9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
      1,0,6,1,0,45,45,1,0,48,57,4,0,37,37,42,43,45,45,47,47,3,0,9,10,13,
      13,32,32,1,0,97,122,2,0,95,95,97,122,182,0,1,1,0,0,0,0,3,1,0,0,0,0,
      5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
      0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
      0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
      0,0,37,1,0,0,0,0,39,1,0,0,0,1,41,1,0,0,0,3,43,1,0,0,0,5,45,1,0,0,0,
      7,51,1,0,0,0,9,56,1,0,0,0,11,62,1,0,0,0,13,67,1,0,0,0,15,71,1,0,0,
      0,17,75,1,0,0,0,19,79,1,0,0,0,21,90,1,0,0,0,23,103,1,0,0,0,25,105,
      1,0,0,0,27,111,1,0,0,0,29,136,1,0,0,0,31,146,1,0,0,0,33,148,1,0,0,
      0,35,150,1,0,0,0,37,160,1,0,0,0,39,166,1,0,0,0,41,42,5,40,0,0,42,2,
      1,0,0,0,43,44,5,41,0,0,44,4,1,0,0,0,45,46,5,102,0,0,46,47,5,108,0,
      0,47,48,5,111,0,0,48,49,5,111,0,0,49,50,5,114,0,0,50,6,1,0,0,0,51,
      52,5,99,0,0,52,53,5,101,0,0,53,54,5,105,0,0,54,55,5,108,0,0,55,8,1,
      0,0,0,56,57,5,114,0,0,57,58,5,111,0,0,58,59,5,117,0,0,59,60,5,110,
      0,0,60,61,5,100,0,0,61,10,1,0,0,0,62,63,5,115,0,0,63,64,5,113,0,0,
      64,65,5,114,0,0,65,66,5,116,0,0,66,12,1,0,0,0,67,68,5,115,0,0,68,69,
      5,105,0,0,69,70,5,110,0,0,70,14,1,0,0,0,71,72,5,99,0,0,72,73,5,111,
      0,0,73,74,5,115,0,0,74,16,1,0,0,0,75,76,5,116,0,0,76,77,5,97,0,0,77,
      78,5,110,0,0,78,18,1,0,0,0,79,80,5,114,0,0,80,81,5,101,0,0,81,82,5,
      97,0,0,82,83,5,100,0,0,83,84,5,95,0,0,84,85,5,105,0,0,85,86,5,110,
      0,0,86,87,5,116,0,0,87,88,5,40,0,0,88,89,5,41,0,0,89,20,1,0,0,0,90,
      91,5,114,0,0,91,92,5,101,0,0,92,93,5,97,0,0,93,94,5,100,0,0,94,95,
      5,95,0,0,95,96,5,102,0,0,96,97,5,108,0,0,97,98,5,111,0,0,98,99,5,97,
      0,0,99,100,5,116,0,0,100,101,5,40,0,0,101,102,5,41,0,0,102,22,1,0,
      0,0,103,104,5,59,0,0,104,24,1,0,0,0,105,106,5,119,0,0,106,107,5,114,
      0,0,107,108,5,105,0,0,108,109,5,116,0,0,109,110,5,101,0,0,110,26,1,
      0,0,0,111,112,5,61,0,0,112,28,1,0,0,0,113,115,7,0,0,0,114,113,1,0,
      0,0,114,115,1,0,0,0,115,117,1,0,0,0,116,118,7,1,0,0,117,116,1,0,0,
      0,118,119,1,0,0,0,119,117,1,0,0,0,119,120,1,0,0,0,120,137,1,0,0,0,
      121,123,7,0,0,0,122,121,1,0,0,0,122,123,1,0,0,0,123,127,1,0,0,0,124,
      126,7,1,0,0,125,124,1,0,0,0,126,129,1,0,0,0,127,125,1,0,0,0,127,128,
      1,0,0,0,128,130,1,0,0,0,129,127,1,0,0,0,130,132,5,46,0,0,131,133,7,
      1,0,0,132,131,1,0,0,0,133,134,1,0,0,0,134,135,1,0,0,0,134,132,1,0,
      0,0,135,137,1,0,0,0,136,114,1,0,0,0,136,122,1,0,0,0,137,30,1,0,0,0,
      138,139,5,105,0,0,139,140,5,110,0,0,140,147,5,116,0,0,141,142,5,102,
      0,0,142,143,5,108,0,0,143,144,5,111,0,0,144,145,5,97,0,0,145,147,5,
      116,0,0,146,138,1,0,0,0,146,141,1,0,0,0,147,32,1,0,0,0,148,149,7,2,
      0,0,149,34,1,0,0,0,150,154,5,34,0,0,151,153,9,0,0,0,152,151,1,0,0,
      0,153,156,1,0,0,0,154,155,1,0,0,0,154,152,1,0,0,0,155,157,1,0,0,0,
      156,154,1,0,0,0,157,158,5,34,0,0,158,36,1,0,0,0,159,161,7,3,0,0,160,
      159,1,0,0,0,161,162,1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,164,
      1,0,0,0,164,165,6,18,0,0,165,38,1,0,0,0,166,170,7,4,0,0,167,169,7,
      5,0,0,168,167,1,0,0,0,169,172,1,0,0,0,170,168,1,0,0,0,170,171,1,0,
      0,0,171,40,1,0,0,0,172,170,1,0,0,0,11,0,114,119,122,127,134,136,146,
      154,162,170,1,6,0,0
  ];

  static final ATN _ATN =
      ATNDeserializer().deserialize(_serializedATN);
}