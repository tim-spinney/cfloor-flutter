// Generated from CFloor2.g4 by ANTLR 4.13.0
// ignore_for_file: unused_import, unused_local_variable, prefer_single_quotes
import 'package:antlr4/antlr4.dart';


class CFloor2Lexer extends Lexer {
  static final checkVersion = () => RuntimeMetaData.checkVersion('4.13.0', RuntimeMetaData.VERSION);

  static final List<DFA> _decisionToDFA = List.generate(
        _ATN.numberOfDecisions, (i) => DFA(_ATN.getDecisionState(i), i));
  static final PredictionContextCache _sharedContextCache = PredictionContextCache();
  static const int
    TOKEN_T__0 = 1, TOKEN_T__1 = 2, TOKEN_T__2 = 3, TOKEN_T__3 = 4, TOKEN_T__4 = 5, 
    TOKEN_T__5 = 6, TOKEN_T__6 = 7, TOKEN_T__7 = 8, TOKEN_T__8 = 9, TOKEN_T__9 = 10, 
    TOKEN_MathOperator = 11, TOKEN_Type = 12, TOKEN_Identifier = 13, TOKEN_StringLiteral = 14, 
    TOKEN_WS = 15, TOKEN_Number = 16;
  @override
  final List<String> channelNames = [
    'DEFAULT_TOKEN_CHANNEL', 'HIDDEN'
  ];

  @override
  final List<String> modeNames = [
    'DEFAULT_MODE'
  ];

  @override
  final List<String> ruleNames = [
    'T__0', 'T__1', 'T__2', 'T__3', 'T__4', 'T__5', 'T__6', 'T__7', 'T__8', 
    'T__9', 'MathOperator', 'Type', 'Identifier', 'StringLiteral', 'WS', 
    'Number'
  ];

  static final List<String?> _LITERAL_NAMES = [
      null, "'('", "')'", "'floor'", "'ceil'", "'round'", "'readInt()'", 
      "'readFloat()'", "'='", "';'", "'write'"
  ];
  static final List<String?> _SYMBOLIC_NAMES = [
      null, null, null, null, null, null, null, null, null, null, null, 
      "MathOperator", "Type", "Identifier", "StringLiteral", "WS", "Number"
  ];
  static final Vocabulary VOCABULARY = VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

  @override
  Vocabulary get vocabulary {
    return VOCABULARY;
  }


  CFloor2Lexer(CharStream input) : super(input) {
    interpreter = LexerATNSimulator(_ATN, _decisionToDFA, _sharedContextCache, recog: this);
  }

  @override
  List<int> get serializedATN => _serializedATN;

  @override
  String get grammarFileName => 'CFloor2.g4';

  @override
  ATN getATN() { return _ATN; }

  static const List<int> _serializedATN = [
      4,0,16,137,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
      6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
      13,2,14,7,14,2,15,7,15,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,
      1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,
      5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,
      1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,
      1,11,1,11,1,11,1,11,3,11,97,8,11,1,12,1,12,5,12,101,8,12,10,12,12,
      12,104,9,12,1,13,1,13,5,13,108,8,13,10,13,12,13,111,9,13,1,13,1,13,
      1,14,4,14,116,8,14,11,14,12,14,117,1,14,1,14,1,15,3,15,123,8,15,1,
      15,4,15,126,8,15,11,15,12,15,127,1,15,1,15,4,15,132,8,15,11,15,12,
      15,133,3,15,136,8,15,1,109,0,16,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
      17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,1,0,6,3,0,42,43,45,
      45,47,47,1,0,97,122,2,0,95,95,97,122,3,0,9,10,13,13,32,32,1,0,45,45,
      1,0,48,57,144,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
      1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
      0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,
      0,0,0,31,1,0,0,0,1,33,1,0,0,0,3,35,1,0,0,0,5,37,1,0,0,0,7,43,1,0,0,
      0,9,48,1,0,0,0,11,54,1,0,0,0,13,64,1,0,0,0,15,76,1,0,0,0,17,78,1,0,
      0,0,19,80,1,0,0,0,21,86,1,0,0,0,23,96,1,0,0,0,25,98,1,0,0,0,27,105,
      1,0,0,0,29,115,1,0,0,0,31,122,1,0,0,0,33,34,5,40,0,0,34,2,1,0,0,0,
      35,36,5,41,0,0,36,4,1,0,0,0,37,38,5,102,0,0,38,39,5,108,0,0,39,40,
      5,111,0,0,40,41,5,111,0,0,41,42,5,114,0,0,42,6,1,0,0,0,43,44,5,99,
      0,0,44,45,5,101,0,0,45,46,5,105,0,0,46,47,5,108,0,0,47,8,1,0,0,0,48,
      49,5,114,0,0,49,50,5,111,0,0,50,51,5,117,0,0,51,52,5,110,0,0,52,53,
      5,100,0,0,53,10,1,0,0,0,54,55,5,114,0,0,55,56,5,101,0,0,56,57,5,97,
      0,0,57,58,5,100,0,0,58,59,5,73,0,0,59,60,5,110,0,0,60,61,5,116,0,0,
      61,62,5,40,0,0,62,63,5,41,0,0,63,12,1,0,0,0,64,65,5,114,0,0,65,66,
      5,101,0,0,66,67,5,97,0,0,67,68,5,100,0,0,68,69,5,70,0,0,69,70,5,108,
      0,0,70,71,5,111,0,0,71,72,5,97,0,0,72,73,5,116,0,0,73,74,5,40,0,0,
      74,75,5,41,0,0,75,14,1,0,0,0,76,77,5,61,0,0,77,16,1,0,0,0,78,79,5,
      59,0,0,79,18,1,0,0,0,80,81,5,119,0,0,81,82,5,114,0,0,82,83,5,105,0,
      0,83,84,5,116,0,0,84,85,5,101,0,0,85,20,1,0,0,0,86,87,7,0,0,0,87,22,
      1,0,0,0,88,89,5,105,0,0,89,90,5,110,0,0,90,97,5,116,0,0,91,92,5,102,
      0,0,92,93,5,108,0,0,93,94,5,111,0,0,94,95,5,97,0,0,95,97,5,116,0,0,
      96,88,1,0,0,0,96,91,1,0,0,0,97,24,1,0,0,0,98,102,7,1,0,0,99,101,7,
      2,0,0,100,99,1,0,0,0,101,104,1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,
      0,103,26,1,0,0,0,104,102,1,0,0,0,105,109,5,34,0,0,106,108,9,0,0,0,
      107,106,1,0,0,0,108,111,1,0,0,0,109,110,1,0,0,0,109,107,1,0,0,0,110,
      112,1,0,0,0,111,109,1,0,0,0,112,113,5,34,0,0,113,28,1,0,0,0,114,116,
      7,3,0,0,115,114,1,0,0,0,116,117,1,0,0,0,117,115,1,0,0,0,117,118,1,
      0,0,0,118,119,1,0,0,0,119,120,6,14,0,0,120,30,1,0,0,0,121,123,7,4,
      0,0,122,121,1,0,0,0,122,123,1,0,0,0,123,125,1,0,0,0,124,126,7,5,0,
      0,125,124,1,0,0,0,126,127,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,
      128,135,1,0,0,0,129,131,5,46,0,0,130,132,7,5,0,0,131,130,1,0,0,0,132,
      133,1,0,0,0,133,131,1,0,0,0,133,134,1,0,0,0,134,136,1,0,0,0,135,129,
      1,0,0,0,135,136,1,0,0,0,136,32,1,0,0,0,9,0,96,102,109,117,122,127,
      133,135,1,6,0,0
  ];

  static final ATN _ATN =
      ATNDeserializer().deserialize(_serializedATN);
}