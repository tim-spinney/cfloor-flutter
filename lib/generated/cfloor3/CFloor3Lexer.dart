// Generated from grammars/CFloor3.g4 by ANTLR 4.13.2
// ignore_for_file: unused_import, unused_local_variable, prefer_single_quotes
import 'package:antlr4/antlr4.dart';


class CFloor3Lexer extends Lexer {
  static final checkVersion = () => RuntimeMetaData.checkVersion('4.13.2', RuntimeMetaData.VERSION);

  static final List<DFA> _decisionToDFA = List.generate(
        _ATN.numberOfDecisions, (i) => DFA(_ATN.getDecisionState(i), i));
  static final PredictionContextCache _sharedContextCache = PredictionContextCache();
  static const int
    TOKEN_T__0 = 1, TOKEN_T__1 = 2, TOKEN_T__2 = 3, TOKEN_T__3 = 4, TOKEN_T__4 = 5, 
    TOKEN_T__5 = 6, TOKEN_T__6 = 7, TOKEN_T__7 = 8, TOKEN_T__8 = 9, TOKEN_T__9 = 10, 
    TOKEN_T__10 = 11, TOKEN_T__11 = 12, TOKEN_T__12 = 13, TOKEN_T__13 = 14, 
    TOKEN_T__14 = 15, TOKEN_T__15 = 16, TOKEN_Primitive = 17, TOKEN_Number = 18, 
    TOKEN_MathOperator = 19, TOKEN_StringLiteral = 20, TOKEN_WS = 21, TOKEN_Identifier = 22;
  @override
  final List<String> channelNames = [
    'DEFAULT_TOKEN_CHANNEL', 'HIDDEN'
  ];

  @override
  final List<String> modeNames = [
    'DEFAULT_MODE'
  ];

  @override
  final List<String> ruleNames = [
    'T__0', 'T__1', 'T__2', 'T__3', 'T__4', 'T__5', 'T__6', 'T__7', 'T__8', 
    'T__9', 'T__10', 'T__11', 'T__12', 'T__13', 'T__14', 'T__15', 'Primitive', 
    'Number', 'MathOperator', 'StringLiteral', 'WS', 'Identifier'
  ];

  static final List<String?> _LITERAL_NAMES = [
      null, "'('", "')'", "'length('", "'read_int()'", "'read_float()'", 
      "'read_string()'", "'floor'", "'ceil'", "'round'", "'sqrt'", "'sin'", 
      "'cos'", "'tan'", "';'", "'write'", "'='"
  ];
  static final List<String?> _SYMBOLIC_NAMES = [
      null, null, null, null, null, null, null, null, null, null, null, 
      null, null, null, null, null, null, "Primitive", "Number", "MathOperator", 
      "StringLiteral", "WS", "Identifier"
  ];
  static final Vocabulary VOCABULARY = VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

  @override
  Vocabulary get vocabulary {
    return VOCABULARY;
  }


  CFloor3Lexer(CharStream input) : super(input) {
    interpreter = LexerATNSimulator(_ATN, _decisionToDFA, _sharedContextCache, recog: this);
  }

  @override
  List<int> get serializedATN => _serializedATN;

  @override
  String get grammarFileName => 'CFloor3.g4';

  @override
  ATN getATN() { return _ATN; }

  static const List<int> _serializedATN = [
      4,0,22,205,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
      6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
      13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
      7,20,2,21,7,21,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,
      1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,
      4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
      1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,
      8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,
      1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,
      14,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
      1,16,1,16,1,16,3,16,154,8,16,1,17,3,17,157,8,17,1,17,4,17,160,8,17,
      11,17,12,17,161,1,17,3,17,165,8,17,1,17,5,17,168,8,17,10,17,12,17,
      171,9,17,1,17,1,17,4,17,175,8,17,11,17,12,17,176,3,17,179,8,17,1,18,
      1,18,1,19,1,19,5,19,185,8,19,10,19,12,19,188,9,19,1,19,1,19,1,20,4,
      20,193,8,20,11,20,12,20,194,1,20,1,20,1,21,1,21,5,21,201,8,21,10,21,
      12,21,204,9,21,2,176,186,0,22,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
      9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
      41,21,43,22,1,0,6,1,0,45,45,1,0,48,57,4,0,37,37,42,43,45,45,47,47,
      3,0,9,10,13,13,32,32,1,0,97,122,2,0,95,95,97,122,215,0,1,1,0,0,0,0,
      3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
      0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
      0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
      0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,
      1,45,1,0,0,0,3,47,1,0,0,0,5,49,1,0,0,0,7,57,1,0,0,0,9,68,1,0,0,0,11,
      81,1,0,0,0,13,95,1,0,0,0,15,101,1,0,0,0,17,106,1,0,0,0,19,112,1,0,
      0,0,21,117,1,0,0,0,23,121,1,0,0,0,25,125,1,0,0,0,27,129,1,0,0,0,29,
      131,1,0,0,0,31,137,1,0,0,0,33,153,1,0,0,0,35,178,1,0,0,0,37,180,1,
      0,0,0,39,182,1,0,0,0,41,192,1,0,0,0,43,198,1,0,0,0,45,46,5,40,0,0,
      46,2,1,0,0,0,47,48,5,41,0,0,48,4,1,0,0,0,49,50,5,108,0,0,50,51,5,101,
      0,0,51,52,5,110,0,0,52,53,5,103,0,0,53,54,5,116,0,0,54,55,5,104,0,
      0,55,56,5,40,0,0,56,6,1,0,0,0,57,58,5,114,0,0,58,59,5,101,0,0,59,60,
      5,97,0,0,60,61,5,100,0,0,61,62,5,95,0,0,62,63,5,105,0,0,63,64,5,110,
      0,0,64,65,5,116,0,0,65,66,5,40,0,0,66,67,5,41,0,0,67,8,1,0,0,0,68,
      69,5,114,0,0,69,70,5,101,0,0,70,71,5,97,0,0,71,72,5,100,0,0,72,73,
      5,95,0,0,73,74,5,102,0,0,74,75,5,108,0,0,75,76,5,111,0,0,76,77,5,97,
      0,0,77,78,5,116,0,0,78,79,5,40,0,0,79,80,5,41,0,0,80,10,1,0,0,0,81,
      82,5,114,0,0,82,83,5,101,0,0,83,84,5,97,0,0,84,85,5,100,0,0,85,86,
      5,95,0,0,86,87,5,115,0,0,87,88,5,116,0,0,88,89,5,114,0,0,89,90,5,105,
      0,0,90,91,5,110,0,0,91,92,5,103,0,0,92,93,5,40,0,0,93,94,5,41,0,0,
      94,12,1,0,0,0,95,96,5,102,0,0,96,97,5,108,0,0,97,98,5,111,0,0,98,99,
      5,111,0,0,99,100,5,114,0,0,100,14,1,0,0,0,101,102,5,99,0,0,102,103,
      5,101,0,0,103,104,5,105,0,0,104,105,5,108,0,0,105,16,1,0,0,0,106,107,
      5,114,0,0,107,108,5,111,0,0,108,109,5,117,0,0,109,110,5,110,0,0,110,
      111,5,100,0,0,111,18,1,0,0,0,112,113,5,115,0,0,113,114,5,113,0,0,114,
      115,5,114,0,0,115,116,5,116,0,0,116,20,1,0,0,0,117,118,5,115,0,0,118,
      119,5,105,0,0,119,120,5,110,0,0,120,22,1,0,0,0,121,122,5,99,0,0,122,
      123,5,111,0,0,123,124,5,115,0,0,124,24,1,0,0,0,125,126,5,116,0,0,126,
      127,5,97,0,0,127,128,5,110,0,0,128,26,1,0,0,0,129,130,5,59,0,0,130,
      28,1,0,0,0,131,132,5,119,0,0,132,133,5,114,0,0,133,134,5,105,0,0,134,
      135,5,116,0,0,135,136,5,101,0,0,136,30,1,0,0,0,137,138,5,61,0,0,138,
      32,1,0,0,0,139,140,5,105,0,0,140,141,5,110,0,0,141,154,5,116,0,0,142,
      143,5,102,0,0,143,144,5,108,0,0,144,145,5,111,0,0,145,146,5,97,0,0,
      146,154,5,116,0,0,147,148,5,115,0,0,148,149,5,116,0,0,149,150,5,114,
      0,0,150,151,5,105,0,0,151,152,5,110,0,0,152,154,5,103,0,0,153,139,
      1,0,0,0,153,142,1,0,0,0,153,147,1,0,0,0,154,34,1,0,0,0,155,157,7,0,
      0,0,156,155,1,0,0,0,156,157,1,0,0,0,157,159,1,0,0,0,158,160,7,1,0,
      0,159,158,1,0,0,0,160,161,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,
      162,179,1,0,0,0,163,165,7,0,0,0,164,163,1,0,0,0,164,165,1,0,0,0,165,
      169,1,0,0,0,166,168,7,1,0,0,167,166,1,0,0,0,168,171,1,0,0,0,169,167,
      1,0,0,0,169,170,1,0,0,0,170,172,1,0,0,0,171,169,1,0,0,0,172,174,5,
      46,0,0,173,175,7,1,0,0,174,173,1,0,0,0,175,176,1,0,0,0,176,177,1,0,
      0,0,176,174,1,0,0,0,177,179,1,0,0,0,178,156,1,0,0,0,178,164,1,0,0,
      0,179,36,1,0,0,0,180,181,7,2,0,0,181,38,1,0,0,0,182,186,5,34,0,0,183,
      185,9,0,0,0,184,183,1,0,0,0,185,188,1,0,0,0,186,187,1,0,0,0,186,184,
      1,0,0,0,187,189,1,0,0,0,188,186,1,0,0,0,189,190,5,34,0,0,190,40,1,
      0,0,0,191,193,7,3,0,0,192,191,1,0,0,0,193,194,1,0,0,0,194,192,1,0,
      0,0,194,195,1,0,0,0,195,196,1,0,0,0,196,197,6,20,0,0,197,42,1,0,0,
      0,198,202,7,4,0,0,199,201,7,5,0,0,200,199,1,0,0,0,201,204,1,0,0,0,
      202,200,1,0,0,0,202,203,1,0,0,0,203,44,1,0,0,0,204,202,1,0,0,0,11,
      0,153,156,161,164,169,176,178,186,194,202,1,6,0,0
  ];

  static final ATN _ATN =
      ATNDeserializer().deserialize(_serializedATN);
}