// Generated from grammars/CFloor3.g4 by ANTLR 4.13.0
// ignore_for_file: unused_import, unused_local_variable, prefer_single_quotes
import 'package:antlr4/antlr4.dart';


class CFloor3Lexer extends Lexer {
  static final checkVersion = () => RuntimeMetaData.checkVersion('4.13.0', RuntimeMetaData.VERSION);

  static final List<DFA> _decisionToDFA = List.generate(
        _ATN.numberOfDecisions, (i) => DFA(_ATN.getDecisionState(i), i));
  static final PredictionContextCache _sharedContextCache = PredictionContextCache();
  static const int
    TOKEN_T__0 = 1, TOKEN_T__1 = 2, TOKEN_T__2 = 3, TOKEN_T__3 = 4, TOKEN_T__4 = 5, 
    TOKEN_T__5 = 6, TOKEN_T__6 = 7, TOKEN_T__7 = 8, TOKEN_T__8 = 9, TOKEN_T__9 = 10, 
    TOKEN_T__10 = 11, TOKEN_T__11 = 12, TOKEN_T__12 = 13, TOKEN_T__13 = 14, 
    TOKEN_T__14 = 15, TOKEN_T__15 = 16, TOKEN_T__16 = 17, TOKEN_T__17 = 18, 
    TOKEN_T__18 = 19, TOKEN_Number = 20, TOKEN_MathOperator = 21, TOKEN_StringLiteral = 22, 
    TOKEN_WS = 23, TOKEN_Identifier = 24;
  @override
  final List<String> channelNames = [
    'DEFAULT_TOKEN_CHANNEL', 'HIDDEN'
  ];

  @override
  final List<String> modeNames = [
    'DEFAULT_MODE'
  ];

  @override
  final List<String> ruleNames = [
    'T__0', 'T__1', 'T__2', 'T__3', 'T__4', 'T__5', 'T__6', 'T__7', 'T__8', 
    'T__9', 'T__10', 'T__11', 'T__12', 'T__13', 'T__14', 'T__15', 'T__16', 
    'T__17', 'T__18', 'Number', 'MathOperator', 'StringLiteral', 'WS', 'Identifier'
  ];

  static final List<String?> _LITERAL_NAMES = [
      null, "'int'", "'float'", "'string'", "'length('", "')'", "'='", "'('", 
      "'readInt()'", "'readFloat()'", "'readString()'", "'floor'", "'ceil'", 
      "'round'", "'sqrt'", "'sin'", "'cos'", "'tan'", "';'", "'write'"
  ];
  static final List<String?> _SYMBOLIC_NAMES = [
      null, null, null, null, null, null, null, null, null, null, null, 
      null, null, null, null, null, null, null, null, null, "Number", "MathOperator", 
      "StringLiteral", "WS", "Identifier"
  ];
  static final Vocabulary VOCABULARY = VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

  @override
  Vocabulary get vocabulary {
    return VOCABULARY;
  }


  CFloor3Lexer(CharStream input) : super(input) {
    interpreter = LexerATNSimulator(_ATN, _decisionToDFA, _sharedContextCache, recog: this);
  }

  @override
  List<int> get serializedATN => _serializedATN;

  @override
  String get grammarFileName => 'CFloor3.g4';

  @override
  ATN getATN() { return _ATN; }

  static const List<int> _serializedATN = [
      4,0,24,207,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
      6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
      13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
      7,20,2,21,7,21,2,22,7,22,2,23,7,23,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,
      1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
      3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
      1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,
      9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,
      11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
      1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,
      16,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,3,19,159,8,19,1,19,
      4,19,162,8,19,11,19,12,19,163,1,19,3,19,167,8,19,1,19,5,19,170,8,19,
      10,19,12,19,173,9,19,1,19,1,19,4,19,177,8,19,11,19,12,19,178,3,19,
      181,8,19,1,20,1,20,1,21,1,21,5,21,187,8,21,10,21,12,21,190,9,21,1,
      21,1,21,1,22,4,22,195,8,22,11,22,12,22,196,1,22,1,22,1,23,1,23,5,23,
      203,8,23,10,23,12,23,206,9,23,2,178,188,0,24,1,1,3,2,5,3,7,4,9,5,11,
      6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
      18,37,19,39,20,41,21,43,22,45,23,47,24,1,0,6,1,0,45,45,1,0,48,57,4,
      0,37,37,42,43,45,45,47,47,3,0,9,10,13,13,32,32,1,0,97,122,2,0,95,95,
      97,122,215,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
      0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
      0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
      0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,
      41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,1,49,1,0,0,0,3,53,
      1,0,0,0,5,59,1,0,0,0,7,66,1,0,0,0,9,74,1,0,0,0,11,76,1,0,0,0,13,78,
      1,0,0,0,15,80,1,0,0,0,17,90,1,0,0,0,19,102,1,0,0,0,21,115,1,0,0,0,
      23,121,1,0,0,0,25,126,1,0,0,0,27,132,1,0,0,0,29,137,1,0,0,0,31,141,
      1,0,0,0,33,145,1,0,0,0,35,149,1,0,0,0,37,151,1,0,0,0,39,180,1,0,0,
      0,41,182,1,0,0,0,43,184,1,0,0,0,45,194,1,0,0,0,47,200,1,0,0,0,49,50,
      5,105,0,0,50,51,5,110,0,0,51,52,5,116,0,0,52,2,1,0,0,0,53,54,5,102,
      0,0,54,55,5,108,0,0,55,56,5,111,0,0,56,57,5,97,0,0,57,58,5,116,0,0,
      58,4,1,0,0,0,59,60,5,115,0,0,60,61,5,116,0,0,61,62,5,114,0,0,62,63,
      5,105,0,0,63,64,5,110,0,0,64,65,5,103,0,0,65,6,1,0,0,0,66,67,5,108,
      0,0,67,68,5,101,0,0,68,69,5,110,0,0,69,70,5,103,0,0,70,71,5,116,0,
      0,71,72,5,104,0,0,72,73,5,40,0,0,73,8,1,0,0,0,74,75,5,41,0,0,75,10,
      1,0,0,0,76,77,5,61,0,0,77,12,1,0,0,0,78,79,5,40,0,0,79,14,1,0,0,0,
      80,81,5,114,0,0,81,82,5,101,0,0,82,83,5,97,0,0,83,84,5,100,0,0,84,
      85,5,73,0,0,85,86,5,110,0,0,86,87,5,116,0,0,87,88,5,40,0,0,88,89,5,
      41,0,0,89,16,1,0,0,0,90,91,5,114,0,0,91,92,5,101,0,0,92,93,5,97,0,
      0,93,94,5,100,0,0,94,95,5,70,0,0,95,96,5,108,0,0,96,97,5,111,0,0,97,
      98,5,97,0,0,98,99,5,116,0,0,99,100,5,40,0,0,100,101,5,41,0,0,101,18,
      1,0,0,0,102,103,5,114,0,0,103,104,5,101,0,0,104,105,5,97,0,0,105,106,
      5,100,0,0,106,107,5,83,0,0,107,108,5,116,0,0,108,109,5,114,0,0,109,
      110,5,105,0,0,110,111,5,110,0,0,111,112,5,103,0,0,112,113,5,40,0,0,
      113,114,5,41,0,0,114,20,1,0,0,0,115,116,5,102,0,0,116,117,5,108,0,
      0,117,118,5,111,0,0,118,119,5,111,0,0,119,120,5,114,0,0,120,22,1,0,
      0,0,121,122,5,99,0,0,122,123,5,101,0,0,123,124,5,105,0,0,124,125,5,
      108,0,0,125,24,1,0,0,0,126,127,5,114,0,0,127,128,5,111,0,0,128,129,
      5,117,0,0,129,130,5,110,0,0,130,131,5,100,0,0,131,26,1,0,0,0,132,133,
      5,115,0,0,133,134,5,113,0,0,134,135,5,114,0,0,135,136,5,116,0,0,136,
      28,1,0,0,0,137,138,5,115,0,0,138,139,5,105,0,0,139,140,5,110,0,0,140,
      30,1,0,0,0,141,142,5,99,0,0,142,143,5,111,0,0,143,144,5,115,0,0,144,
      32,1,0,0,0,145,146,5,116,0,0,146,147,5,97,0,0,147,148,5,110,0,0,148,
      34,1,0,0,0,149,150,5,59,0,0,150,36,1,0,0,0,151,152,5,119,0,0,152,153,
      5,114,0,0,153,154,5,105,0,0,154,155,5,116,0,0,155,156,5,101,0,0,156,
      38,1,0,0,0,157,159,7,0,0,0,158,157,1,0,0,0,158,159,1,0,0,0,159,161,
      1,0,0,0,160,162,7,1,0,0,161,160,1,0,0,0,162,163,1,0,0,0,163,161,1,
      0,0,0,163,164,1,0,0,0,164,181,1,0,0,0,165,167,7,0,0,0,166,165,1,0,
      0,0,166,167,1,0,0,0,167,171,1,0,0,0,168,170,7,1,0,0,169,168,1,0,0,
      0,170,173,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,174,1,0,0,0,
      173,171,1,0,0,0,174,176,5,46,0,0,175,177,7,1,0,0,176,175,1,0,0,0,177,
      178,1,0,0,0,178,179,1,0,0,0,178,176,1,0,0,0,179,181,1,0,0,0,180,158,
      1,0,0,0,180,166,1,0,0,0,181,40,1,0,0,0,182,183,7,2,0,0,183,42,1,0,
      0,0,184,188,5,34,0,0,185,187,9,0,0,0,186,185,1,0,0,0,187,190,1,0,0,
      0,188,189,1,0,0,0,188,186,1,0,0,0,189,191,1,0,0,0,190,188,1,0,0,0,
      191,192,5,34,0,0,192,44,1,0,0,0,193,195,7,3,0,0,194,193,1,0,0,0,195,
      196,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,198,1,0,0,0,198,199,
      6,22,0,0,199,46,1,0,0,0,200,204,7,4,0,0,201,203,7,5,0,0,202,201,1,
      0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,48,1,0,0,
      0,206,204,1,0,0,0,10,0,158,163,166,171,178,180,188,196,204,1,6,0,0
  ];

  static final ATN _ATN =
      ATNDeserializer().deserialize(_serializedATN);
}