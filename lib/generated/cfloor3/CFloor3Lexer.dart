// Generated from grammars/CFloor3.g4 by ANTLR 4.13.0
// ignore_for_file: unused_import, unused_local_variable, prefer_single_quotes
import 'package:antlr4/antlr4.dart';


class CFloor3Lexer extends Lexer {
  static final checkVersion = () => RuntimeMetaData.checkVersion('4.13.0', RuntimeMetaData.VERSION);

  static final List<DFA> _decisionToDFA = List.generate(
        _ATN.numberOfDecisions, (i) => DFA(_ATN.getDecisionState(i), i));
  static final PredictionContextCache _sharedContextCache = PredictionContextCache();
  static const int
    TOKEN_T__0 = 1, TOKEN_T__1 = 2, TOKEN_T__2 = 3, TOKEN_T__3 = 4, TOKEN_T__4 = 5, 
    TOKEN_T__5 = 6, TOKEN_T__6 = 7, TOKEN_T__7 = 8, TOKEN_T__8 = 9, TOKEN_T__9 = 10, 
    TOKEN_T__10 = 11, TOKEN_T__11 = 12, TOKEN_Type = 13, TOKEN_Number = 14, 
    TOKEN_MathOperator = 15, TOKEN_StringLiteral = 16, TOKEN_WS = 17, TOKEN_Identifier = 18;
  @override
  final List<String> channelNames = [
    'DEFAULT_TOKEN_CHANNEL', 'HIDDEN'
  ];

  @override
  final List<String> modeNames = [
    'DEFAULT_MODE'
  ];

  @override
  final List<String> ruleNames = [
    'T__0', 'T__1', 'T__2', 'T__3', 'T__4', 'T__5', 'T__6', 'T__7', 'T__8', 
    'T__9', 'T__10', 'T__11', 'Type', 'Number', 'MathOperator', 'StringLiteral', 
    'WS', 'Identifier'
  ];

  static final List<String?> _LITERAL_NAMES = [
      null, "'length('", "')'", "'='", "'('", "'readInt()'", "'readFloat()'", 
      "'readString()'", "'floor'", "'ceil'", "'round'", "';'", "'write'"
  ];
  static final List<String?> _SYMBOLIC_NAMES = [
      null, null, null, null, null, null, null, null, null, null, null, 
      null, null, "Type", "Number", "MathOperator", "StringLiteral", "WS", 
      "Identifier"
  ];
  static final Vocabulary VOCABULARY = VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

  @override
  Vocabulary get vocabulary {
    return VOCABULARY;
  }


  CFloor3Lexer(CharStream input) : super(input) {
    interpreter = LexerATNSimulator(_ATN, _decisionToDFA, _sharedContextCache, recog: this);
  }

  @override
  List<int> get serializedATN => _serializedATN;

  @override
  String get grammarFileName => 'CFloor3.g4';

  @override
  ATN getATN() { return _ATN; }

  static const List<int> _serializedATN = [
      4,0,18,168,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
      6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
      13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,0,1,0,1,0,
      1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
      4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,
      1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,
      8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,
      1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
      12,1,12,1,12,1,12,3,12,126,8,12,1,13,3,13,129,8,13,1,13,4,13,132,8,
      13,11,13,12,13,133,1,13,1,13,4,13,138,8,13,11,13,12,13,139,3,13,142,
      8,13,1,14,1,14,1,15,1,15,5,15,148,8,15,10,15,12,15,151,9,15,1,15,1,
      15,1,16,4,16,156,8,16,11,16,12,16,157,1,16,1,16,1,17,1,17,5,17,164,
      8,17,10,17,12,17,167,9,17,1,149,0,18,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
      15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,1,
      0,6,1,0,45,45,1,0,48,57,4,0,37,37,42,43,45,45,47,47,3,0,9,10,13,13,
      32,32,1,0,97,122,2,0,95,95,97,122,176,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
      1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
      0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
      0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
      1,37,1,0,0,0,3,45,1,0,0,0,5,47,1,0,0,0,7,49,1,0,0,0,9,51,1,0,0,0,11,
      61,1,0,0,0,13,73,1,0,0,0,15,86,1,0,0,0,17,92,1,0,0,0,19,97,1,0,0,0,
      21,103,1,0,0,0,23,105,1,0,0,0,25,125,1,0,0,0,27,128,1,0,0,0,29,143,
      1,0,0,0,31,145,1,0,0,0,33,155,1,0,0,0,35,161,1,0,0,0,37,38,5,108,0,
      0,38,39,5,101,0,0,39,40,5,110,0,0,40,41,5,103,0,0,41,42,5,116,0,0,
      42,43,5,104,0,0,43,44,5,40,0,0,44,2,1,0,0,0,45,46,5,41,0,0,46,4,1,
      0,0,0,47,48,5,61,0,0,48,6,1,0,0,0,49,50,5,40,0,0,50,8,1,0,0,0,51,52,
      5,114,0,0,52,53,5,101,0,0,53,54,5,97,0,0,54,55,5,100,0,0,55,56,5,73,
      0,0,56,57,5,110,0,0,57,58,5,116,0,0,58,59,5,40,0,0,59,60,5,41,0,0,
      60,10,1,0,0,0,61,62,5,114,0,0,62,63,5,101,0,0,63,64,5,97,0,0,64,65,
      5,100,0,0,65,66,5,70,0,0,66,67,5,108,0,0,67,68,5,111,0,0,68,69,5,97,
      0,0,69,70,5,116,0,0,70,71,5,40,0,0,71,72,5,41,0,0,72,12,1,0,0,0,73,
      74,5,114,0,0,74,75,5,101,0,0,75,76,5,97,0,0,76,77,5,100,0,0,77,78,
      5,83,0,0,78,79,5,116,0,0,79,80,5,114,0,0,80,81,5,105,0,0,81,82,5,110,
      0,0,82,83,5,103,0,0,83,84,5,40,0,0,84,85,5,41,0,0,85,14,1,0,0,0,86,
      87,5,102,0,0,87,88,5,108,0,0,88,89,5,111,0,0,89,90,5,111,0,0,90,91,
      5,114,0,0,91,16,1,0,0,0,92,93,5,99,0,0,93,94,5,101,0,0,94,95,5,105,
      0,0,95,96,5,108,0,0,96,18,1,0,0,0,97,98,5,114,0,0,98,99,5,111,0,0,
      99,100,5,117,0,0,100,101,5,110,0,0,101,102,5,100,0,0,102,20,1,0,0,
      0,103,104,5,59,0,0,104,22,1,0,0,0,105,106,5,119,0,0,106,107,5,114,
      0,0,107,108,5,105,0,0,108,109,5,116,0,0,109,110,5,101,0,0,110,24,1,
      0,0,0,111,112,5,105,0,0,112,113,5,110,0,0,113,126,5,116,0,0,114,115,
      5,102,0,0,115,116,5,108,0,0,116,117,5,111,0,0,117,118,5,97,0,0,118,
      126,5,116,0,0,119,120,5,115,0,0,120,121,5,116,0,0,121,122,5,114,0,
      0,122,123,5,105,0,0,123,124,5,110,0,0,124,126,5,103,0,0,125,111,1,
      0,0,0,125,114,1,0,0,0,125,119,1,0,0,0,126,26,1,0,0,0,127,129,7,0,0,
      0,128,127,1,0,0,0,128,129,1,0,0,0,129,131,1,0,0,0,130,132,7,1,0,0,
      131,130,1,0,0,0,132,133,1,0,0,0,133,131,1,0,0,0,133,134,1,0,0,0,134,
      141,1,0,0,0,135,137,5,46,0,0,136,138,7,1,0,0,137,136,1,0,0,0,138,139,
      1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,142,1,0,0,0,141,135,1,
      0,0,0,141,142,1,0,0,0,142,28,1,0,0,0,143,144,7,2,0,0,144,30,1,0,0,
      0,145,149,5,34,0,0,146,148,9,0,0,0,147,146,1,0,0,0,148,151,1,0,0,0,
      149,150,1,0,0,0,149,147,1,0,0,0,150,152,1,0,0,0,151,149,1,0,0,0,152,
      153,5,34,0,0,153,32,1,0,0,0,154,156,7,3,0,0,155,154,1,0,0,0,156,157,
      1,0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,159,1,0,0,0,159,160,6,
      16,0,0,160,34,1,0,0,0,161,165,7,4,0,0,162,164,7,5,0,0,163,162,1,0,
      0,0,164,167,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,36,1,0,0,0,
      167,165,1,0,0,0,9,0,125,128,133,139,141,149,157,165,1,6,0,0
  ];

  static final ATN _ATN =
      ATNDeserializer().deserialize(_serializedATN);
}