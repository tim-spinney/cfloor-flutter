// Generated from grammars/CFloor4.g4 by ANTLR 4.13.1
// ignore_for_file: unused_import, unused_local_variable, prefer_single_quotes
import 'package:antlr4/antlr4.dart';


class CFloor4Lexer extends Lexer {
  static final checkVersion = () => RuntimeMetaData.checkVersion('4.13.1', RuntimeMetaData.VERSION);

  static final List<DFA> _decisionToDFA = List.generate(
        _ATN.numberOfDecisions, (i) => DFA(_ATN.getDecisionState(i), i));
  static final PredictionContextCache _sharedContextCache = PredictionContextCache();
  static const int
    TOKEN_T__0 = 1, TOKEN_T__1 = 2, TOKEN_T__2 = 3, TOKEN_T__3 = 4, TOKEN_T__4 = 5, 
    TOKEN_T__5 = 6, TOKEN_T__6 = 7, TOKEN_T__7 = 8, TOKEN_T__8 = 9, TOKEN_T__9 = 10, 
    TOKEN_T__10 = 11, TOKEN_T__11 = 12, TOKEN_T__12 = 13, TOKEN_T__13 = 14, 
    TOKEN_T__14 = 15, TOKEN_T__15 = 16, TOKEN_T__16 = 17, TOKEN_T__17 = 18, 
    TOKEN_T__18 = 19, TOKEN_T__19 = 20, TOKEN_T__20 = 21, TOKEN_T__21 = 22, 
    TOKEN_T__22 = 23, TOKEN_T__23 = 24, TOKEN_BinaryBooleanOperator = 25, 
    TOKEN_UnaryBooleanOperator = 26, TOKEN_BooleanLiteral = 27, TOKEN_Comparator = 28, 
    TOKEN_Number = 29, TOKEN_MathOperator = 30, TOKEN_StringLiteral = 31, 
    TOKEN_WS = 32, TOKEN_Identifier = 33;
  @override
  final List<String> channelNames = [
    'DEFAULT_TOKEN_CHANNEL', 'HIDDEN'
  ];

  @override
  final List<String> modeNames = [
    'DEFAULT_MODE'
  ];

  @override
  final List<String> ruleNames = [
    'T__0', 'T__1', 'T__2', 'T__3', 'T__4', 'T__5', 'T__6', 'T__7', 'T__8', 
    'T__9', 'T__10', 'T__11', 'T__12', 'T__13', 'T__14', 'T__15', 'T__16', 
    'T__17', 'T__18', 'T__19', 'T__20', 'T__21', 'T__22', 'T__23', 'BinaryBooleanOperator', 
    'UnaryBooleanOperator', 'BooleanLiteral', 'Comparator', 'Number', 'MathOperator', 
    'StringLiteral', 'WS', 'Identifier'
  ];

  static final List<String?> _LITERAL_NAMES = [
      null, "'int'", "'float'", "'string'", "'bool'", "'('", "')'", "'='", 
      "'{'", "'}'", "'if'", "'else'", "'length('", "'read_int()'", "'read_float()'", 
      "'read_string()'", "'floor'", "'ceil'", "'round'", "'sqrt'", "'sin'", 
      "'cos'", "'tan'", "';'", "'write'", null, "'not'"
  ];
  static final List<String?> _SYMBOLIC_NAMES = [
      null, null, null, null, null, null, null, null, null, null, null, 
      null, null, null, null, null, null, null, null, null, null, null, 
      null, null, null, "BinaryBooleanOperator", "UnaryBooleanOperator", 
      "BooleanLiteral", "Comparator", "Number", "MathOperator", "StringLiteral", 
      "WS", "Identifier"
  ];
  static final Vocabulary VOCABULARY = VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

  @override
  Vocabulary get vocabulary {
    return VOCABULARY;
  }


  CFloor4Lexer(CharStream input) : super(input) {
    interpreter = LexerATNSimulator(_ATN, _decisionToDFA, _sharedContextCache, recog: this);
  }

  @override
  List<int> get serializedATN => _serializedATN;

  @override
  String get grammarFileName => 'CFloor4.g4';

  @override
  ATN getATN() { return _ATN; }

  static const List<int> _serializedATN = [
      4,0,33,279,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
      6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
      13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
      7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
      27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,1,0,1,0,
      1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,
      3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,
      1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
      12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
      1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,
      14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
      1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,
      17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
      1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,
      24,1,24,1,24,1,24,3,24,201,8,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,
      1,26,1,26,1,26,1,26,1,26,1,26,3,26,216,8,26,1,27,1,27,1,27,1,27,1,
      27,1,27,1,27,1,27,1,27,1,27,3,27,228,8,27,1,28,3,28,231,8,28,1,28,
      4,28,234,8,28,11,28,12,28,235,1,28,3,28,239,8,28,1,28,5,28,242,8,28,
      10,28,12,28,245,9,28,1,28,1,28,4,28,249,8,28,11,28,12,28,250,3,28,
      253,8,28,1,29,1,29,1,30,1,30,5,30,259,8,30,10,30,12,30,262,9,30,1,
      30,1,30,1,31,4,31,267,8,31,11,31,12,31,268,1,31,1,31,1,32,1,32,5,32,
      275,8,32,10,32,12,32,278,9,32,2,250,260,0,33,1,1,3,2,5,3,7,4,9,5,11,
      6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
      18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
      29,59,30,61,31,63,32,65,33,1,0,6,1,0,45,45,1,0,48,57,4,0,37,37,42,
      43,45,45,47,47,3,0,9,10,13,13,32,32,1,0,97,122,2,0,95,95,97,122,294,
      0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
      0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
      0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
      0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
      0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
      53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
      1,0,0,0,0,65,1,0,0,0,1,67,1,0,0,0,3,71,1,0,0,0,5,77,1,0,0,0,7,84,1,
      0,0,0,9,89,1,0,0,0,11,91,1,0,0,0,13,93,1,0,0,0,15,95,1,0,0,0,17,97,
      1,0,0,0,19,99,1,0,0,0,21,102,1,0,0,0,23,107,1,0,0,0,25,115,1,0,0,0,
      27,126,1,0,0,0,29,139,1,0,0,0,31,153,1,0,0,0,33,159,1,0,0,0,35,164,
      1,0,0,0,37,170,1,0,0,0,39,175,1,0,0,0,41,179,1,0,0,0,43,183,1,0,0,
      0,45,187,1,0,0,0,47,189,1,0,0,0,49,200,1,0,0,0,51,202,1,0,0,0,53,215,
      1,0,0,0,55,227,1,0,0,0,57,252,1,0,0,0,59,254,1,0,0,0,61,256,1,0,0,
      0,63,266,1,0,0,0,65,272,1,0,0,0,67,68,5,105,0,0,68,69,5,110,0,0,69,
      70,5,116,0,0,70,2,1,0,0,0,71,72,5,102,0,0,72,73,5,108,0,0,73,74,5,
      111,0,0,74,75,5,97,0,0,75,76,5,116,0,0,76,4,1,0,0,0,77,78,5,115,0,
      0,78,79,5,116,0,0,79,80,5,114,0,0,80,81,5,105,0,0,81,82,5,110,0,0,
      82,83,5,103,0,0,83,6,1,0,0,0,84,85,5,98,0,0,85,86,5,111,0,0,86,87,
      5,111,0,0,87,88,5,108,0,0,88,8,1,0,0,0,89,90,5,40,0,0,90,10,1,0,0,
      0,91,92,5,41,0,0,92,12,1,0,0,0,93,94,5,61,0,0,94,14,1,0,0,0,95,96,
      5,123,0,0,96,16,1,0,0,0,97,98,5,125,0,0,98,18,1,0,0,0,99,100,5,105,
      0,0,100,101,5,102,0,0,101,20,1,0,0,0,102,103,5,101,0,0,103,104,5,108,
      0,0,104,105,5,115,0,0,105,106,5,101,0,0,106,22,1,0,0,0,107,108,5,108,
      0,0,108,109,5,101,0,0,109,110,5,110,0,0,110,111,5,103,0,0,111,112,
      5,116,0,0,112,113,5,104,0,0,113,114,5,40,0,0,114,24,1,0,0,0,115,116,
      5,114,0,0,116,117,5,101,0,0,117,118,5,97,0,0,118,119,5,100,0,0,119,
      120,5,95,0,0,120,121,5,105,0,0,121,122,5,110,0,0,122,123,5,116,0,0,
      123,124,5,40,0,0,124,125,5,41,0,0,125,26,1,0,0,0,126,127,5,114,0,0,
      127,128,5,101,0,0,128,129,5,97,0,0,129,130,5,100,0,0,130,131,5,95,
      0,0,131,132,5,102,0,0,132,133,5,108,0,0,133,134,5,111,0,0,134,135,
      5,97,0,0,135,136,5,116,0,0,136,137,5,40,0,0,137,138,5,41,0,0,138,28,
      1,0,0,0,139,140,5,114,0,0,140,141,5,101,0,0,141,142,5,97,0,0,142,143,
      5,100,0,0,143,144,5,95,0,0,144,145,5,115,0,0,145,146,5,116,0,0,146,
      147,5,114,0,0,147,148,5,105,0,0,148,149,5,110,0,0,149,150,5,103,0,
      0,150,151,5,40,0,0,151,152,5,41,0,0,152,30,1,0,0,0,153,154,5,102,0,
      0,154,155,5,108,0,0,155,156,5,111,0,0,156,157,5,111,0,0,157,158,5,
      114,0,0,158,32,1,0,0,0,159,160,5,99,0,0,160,161,5,101,0,0,161,162,
      5,105,0,0,162,163,5,108,0,0,163,34,1,0,0,0,164,165,5,114,0,0,165,166,
      5,111,0,0,166,167,5,117,0,0,167,168,5,110,0,0,168,169,5,100,0,0,169,
      36,1,0,0,0,170,171,5,115,0,0,171,172,5,113,0,0,172,173,5,114,0,0,173,
      174,5,116,0,0,174,38,1,0,0,0,175,176,5,115,0,0,176,177,5,105,0,0,177,
      178,5,110,0,0,178,40,1,0,0,0,179,180,5,99,0,0,180,181,5,111,0,0,181,
      182,5,115,0,0,182,42,1,0,0,0,183,184,5,116,0,0,184,185,5,97,0,0,185,
      186,5,110,0,0,186,44,1,0,0,0,187,188,5,59,0,0,188,46,1,0,0,0,189,190,
      5,119,0,0,190,191,5,114,0,0,191,192,5,105,0,0,192,193,5,116,0,0,193,
      194,5,101,0,0,194,48,1,0,0,0,195,196,5,97,0,0,196,197,5,110,0,0,197,
      201,5,100,0,0,198,199,5,111,0,0,199,201,5,114,0,0,200,195,1,0,0,0,
      200,198,1,0,0,0,201,50,1,0,0,0,202,203,5,110,0,0,203,204,5,111,0,0,
      204,205,5,116,0,0,205,52,1,0,0,0,206,207,5,116,0,0,207,208,5,114,0,
      0,208,209,5,117,0,0,209,216,5,101,0,0,210,211,5,102,0,0,211,212,5,
      97,0,0,212,213,5,108,0,0,213,214,5,115,0,0,214,216,5,101,0,0,215,206,
      1,0,0,0,215,210,1,0,0,0,216,54,1,0,0,0,217,218,5,61,0,0,218,228,5,
      61,0,0,219,220,5,33,0,0,220,228,5,61,0,0,221,228,5,60,0,0,222,223,
      5,60,0,0,223,228,5,61,0,0,224,228,5,62,0,0,225,226,5,62,0,0,226,228,
      5,61,0,0,227,217,1,0,0,0,227,219,1,0,0,0,227,221,1,0,0,0,227,222,1,
      0,0,0,227,224,1,0,0,0,227,225,1,0,0,0,228,56,1,0,0,0,229,231,7,0,0,
      0,230,229,1,0,0,0,230,231,1,0,0,0,231,233,1,0,0,0,232,234,7,1,0,0,
      233,232,1,0,0,0,234,235,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,
      253,1,0,0,0,237,239,7,0,0,0,238,237,1,0,0,0,238,239,1,0,0,0,239,243,
      1,0,0,0,240,242,7,1,0,0,241,240,1,0,0,0,242,245,1,0,0,0,243,241,1,
      0,0,0,243,244,1,0,0,0,244,246,1,0,0,0,245,243,1,0,0,0,246,248,5,46,
      0,0,247,249,7,1,0,0,248,247,1,0,0,0,249,250,1,0,0,0,250,251,1,0,0,
      0,250,248,1,0,0,0,251,253,1,0,0,0,252,230,1,0,0,0,252,238,1,0,0,0,
      253,58,1,0,0,0,254,255,7,2,0,0,255,60,1,0,0,0,256,260,5,34,0,0,257,
      259,9,0,0,0,258,257,1,0,0,0,259,262,1,0,0,0,260,261,1,0,0,0,260,258,
      1,0,0,0,261,263,1,0,0,0,262,260,1,0,0,0,263,264,5,34,0,0,264,62,1,
      0,0,0,265,267,7,3,0,0,266,265,1,0,0,0,267,268,1,0,0,0,268,266,1,0,
      0,0,268,269,1,0,0,0,269,270,1,0,0,0,270,271,6,31,0,0,271,64,1,0,0,
      0,272,276,7,4,0,0,273,275,7,5,0,0,274,273,1,0,0,0,275,278,1,0,0,0,
      276,274,1,0,0,0,276,277,1,0,0,0,277,66,1,0,0,0,278,276,1,0,0,0,13,
      0,200,215,227,230,235,238,243,250,252,260,268,276,1,6,0,0
  ];

  static final ATN _ATN =
      ATNDeserializer().deserialize(_serializedATN);
}