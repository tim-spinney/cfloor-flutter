// Generated from grammars/CFloor4.g4 by ANTLR 4.13.0
// ignore_for_file: unused_import, unused_local_variable, prefer_single_quotes
import 'package:antlr4/antlr4.dart';


class CFloor4Lexer extends Lexer {
  static final checkVersion = () => RuntimeMetaData.checkVersion('4.13.0', RuntimeMetaData.VERSION);

  static final List<DFA> _decisionToDFA = List.generate(
        _ATN.numberOfDecisions, (i) => DFA(_ATN.getDecisionState(i), i));
  static final PredictionContextCache _sharedContextCache = PredictionContextCache();
  static const int
    TOKEN_T__0 = 1, TOKEN_T__1 = 2, TOKEN_T__2 = 3, TOKEN_T__3 = 4, TOKEN_T__4 = 5, 
    TOKEN_T__5 = 6, TOKEN_T__6 = 7, TOKEN_T__7 = 8, TOKEN_T__8 = 9, TOKEN_T__9 = 10, 
    TOKEN_T__10 = 11, TOKEN_T__11 = 12, TOKEN_T__12 = 13, TOKEN_T__13 = 14, 
    TOKEN_T__14 = 15, TOKEN_T__15 = 16, TOKEN_BinaryBooleanOperator = 17, 
    TOKEN_UnaryBooleanOperator = 18, TOKEN_BooleanLiteral = 19, TOKEN_Comparator = 20, 
    TOKEN_Type = 21, TOKEN_Number = 22, TOKEN_MathOperator = 23, TOKEN_StringLiteral = 24, 
    TOKEN_WS = 25, TOKEN_Identifier = 26;
  @override
  final List<String> channelNames = [
    'DEFAULT_TOKEN_CHANNEL', 'HIDDEN'
  ];

  @override
  final List<String> modeNames = [
    'DEFAULT_MODE'
  ];

  @override
  final List<String> ruleNames = [
    'T__0', 'T__1', 'T__2', 'T__3', 'T__4', 'T__5', 'T__6', 'T__7', 'T__8', 
    'T__9', 'T__10', 'T__11', 'T__12', 'T__13', 'T__14', 'T__15', 'BinaryBooleanOperator', 
    'UnaryBooleanOperator', 'BooleanLiteral', 'Comparator', 'Type', 'Number', 
    'MathOperator', 'StringLiteral', 'WS', 'Identifier'
  ];

  static final List<String?> _LITERAL_NAMES = [
      null, "'('", "')'", "'='", "'{'", "'}'", "'if'", "'else'", "'length('", 
      "'readInt()'", "'readFloat()'", "'readString()'", "'floor'", "'ceil'", 
      "'round'", "';'", "'write'", null, "'not'"
  ];
  static final List<String?> _SYMBOLIC_NAMES = [
      null, null, null, null, null, null, null, null, null, null, null, 
      null, null, null, null, null, null, "BinaryBooleanOperator", "UnaryBooleanOperator", 
      "BooleanLiteral", "Comparator", "Type", "Number", "MathOperator", 
      "StringLiteral", "WS", "Identifier"
  ];
  static final Vocabulary VOCABULARY = VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

  @override
  Vocabulary get vocabulary {
    return VOCABULARY;
  }


  CFloor4Lexer(CharStream input) : super(input) {
    interpreter = LexerATNSimulator(_ATN, _decisionToDFA, _sharedContextCache, recog: this);
  }

  @override
  List<int> get serializedATN => _serializedATN;

  @override
  String get grammarFileName => 'CFloor4.g4';

  @override
  ATN getATN() { return _ATN; }

  static const List<int> _serializedATN = [
      4,0,26,234,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
      6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
      13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
      7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,1,1,
      1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,
      7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
      1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
      1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
      11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,
      1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,3,16,145,
      8,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
      18,3,18,160,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
      3,19,172,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
      20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,192,8,20,1,21,3,21,195,
      8,21,1,21,4,21,198,8,21,11,21,12,21,199,1,21,1,21,4,21,204,8,21,11,
      21,12,21,205,3,21,208,8,21,1,22,1,22,1,23,1,23,5,23,214,8,23,10,23,
      12,23,217,9,23,1,23,1,23,1,24,4,24,222,8,24,11,24,12,24,223,1,24,1,
      24,1,25,1,25,5,25,230,8,25,10,25,12,25,233,9,25,1,215,0,26,1,1,3,2,
      5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
      31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
      1,0,6,1,0,45,45,1,0,48,57,4,0,37,37,42,43,45,45,47,47,3,0,9,10,13,
      13,32,32,1,0,97,122,2,0,95,95,97,122,250,0,1,1,0,0,0,0,3,1,0,0,0,0,
      5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
      0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
      0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
      0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
      0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,1,53,1,0,0,0,3,55,1,0,0,0,5,
      57,1,0,0,0,7,59,1,0,0,0,9,61,1,0,0,0,11,63,1,0,0,0,13,66,1,0,0,0,15,
      71,1,0,0,0,17,79,1,0,0,0,19,89,1,0,0,0,21,101,1,0,0,0,23,114,1,0,0,
      0,25,120,1,0,0,0,27,125,1,0,0,0,29,131,1,0,0,0,31,133,1,0,0,0,33,144,
      1,0,0,0,35,146,1,0,0,0,37,159,1,0,0,0,39,171,1,0,0,0,41,191,1,0,0,
      0,43,194,1,0,0,0,45,209,1,0,0,0,47,211,1,0,0,0,49,221,1,0,0,0,51,227,
      1,0,0,0,53,54,5,40,0,0,54,2,1,0,0,0,55,56,5,41,0,0,56,4,1,0,0,0,57,
      58,5,61,0,0,58,6,1,0,0,0,59,60,5,123,0,0,60,8,1,0,0,0,61,62,5,125,
      0,0,62,10,1,0,0,0,63,64,5,105,0,0,64,65,5,102,0,0,65,12,1,0,0,0,66,
      67,5,101,0,0,67,68,5,108,0,0,68,69,5,115,0,0,69,70,5,101,0,0,70,14,
      1,0,0,0,71,72,5,108,0,0,72,73,5,101,0,0,73,74,5,110,0,0,74,75,5,103,
      0,0,75,76,5,116,0,0,76,77,5,104,0,0,77,78,5,40,0,0,78,16,1,0,0,0,79,
      80,5,114,0,0,80,81,5,101,0,0,81,82,5,97,0,0,82,83,5,100,0,0,83,84,
      5,73,0,0,84,85,5,110,0,0,85,86,5,116,0,0,86,87,5,40,0,0,87,88,5,41,
      0,0,88,18,1,0,0,0,89,90,5,114,0,0,90,91,5,101,0,0,91,92,5,97,0,0,92,
      93,5,100,0,0,93,94,5,70,0,0,94,95,5,108,0,0,95,96,5,111,0,0,96,97,
      5,97,0,0,97,98,5,116,0,0,98,99,5,40,0,0,99,100,5,41,0,0,100,20,1,0,
      0,0,101,102,5,114,0,0,102,103,5,101,0,0,103,104,5,97,0,0,104,105,5,
      100,0,0,105,106,5,83,0,0,106,107,5,116,0,0,107,108,5,114,0,0,108,109,
      5,105,0,0,109,110,5,110,0,0,110,111,5,103,0,0,111,112,5,40,0,0,112,
      113,5,41,0,0,113,22,1,0,0,0,114,115,5,102,0,0,115,116,5,108,0,0,116,
      117,5,111,0,0,117,118,5,111,0,0,118,119,5,114,0,0,119,24,1,0,0,0,120,
      121,5,99,0,0,121,122,5,101,0,0,122,123,5,105,0,0,123,124,5,108,0,0,
      124,26,1,0,0,0,125,126,5,114,0,0,126,127,5,111,0,0,127,128,5,117,0,
      0,128,129,5,110,0,0,129,130,5,100,0,0,130,28,1,0,0,0,131,132,5,59,
      0,0,132,30,1,0,0,0,133,134,5,119,0,0,134,135,5,114,0,0,135,136,5,105,
      0,0,136,137,5,116,0,0,137,138,5,101,0,0,138,32,1,0,0,0,139,140,5,97,
      0,0,140,141,5,110,0,0,141,145,5,100,0,0,142,143,5,111,0,0,143,145,
      5,114,0,0,144,139,1,0,0,0,144,142,1,0,0,0,145,34,1,0,0,0,146,147,5,
      110,0,0,147,148,5,111,0,0,148,149,5,116,0,0,149,36,1,0,0,0,150,151,
      5,116,0,0,151,152,5,114,0,0,152,153,5,117,0,0,153,160,5,101,0,0,154,
      155,5,102,0,0,155,156,5,97,0,0,156,157,5,108,0,0,157,158,5,115,0,0,
      158,160,5,101,0,0,159,150,1,0,0,0,159,154,1,0,0,0,160,38,1,0,0,0,161,
      162,5,61,0,0,162,172,5,61,0,0,163,164,5,33,0,0,164,172,5,61,0,0,165,
      172,5,60,0,0,166,167,5,60,0,0,167,172,5,61,0,0,168,172,5,62,0,0,169,
      170,5,62,0,0,170,172,5,61,0,0,171,161,1,0,0,0,171,163,1,0,0,0,171,
      165,1,0,0,0,171,166,1,0,0,0,171,168,1,0,0,0,171,169,1,0,0,0,172,40,
      1,0,0,0,173,174,5,105,0,0,174,175,5,110,0,0,175,192,5,116,0,0,176,
      177,5,102,0,0,177,178,5,108,0,0,178,179,5,111,0,0,179,180,5,97,0,0,
      180,192,5,116,0,0,181,182,5,115,0,0,182,183,5,116,0,0,183,184,5,114,
      0,0,184,185,5,105,0,0,185,186,5,110,0,0,186,192,5,103,0,0,187,188,
      5,98,0,0,188,189,5,111,0,0,189,190,5,111,0,0,190,192,5,108,0,0,191,
      173,1,0,0,0,191,176,1,0,0,0,191,181,1,0,0,0,191,187,1,0,0,0,192,42,
      1,0,0,0,193,195,7,0,0,0,194,193,1,0,0,0,194,195,1,0,0,0,195,197,1,
      0,0,0,196,198,7,1,0,0,197,196,1,0,0,0,198,199,1,0,0,0,199,197,1,0,
      0,0,199,200,1,0,0,0,200,207,1,0,0,0,201,203,5,46,0,0,202,204,7,1,0,
      0,203,202,1,0,0,0,204,205,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,
      206,208,1,0,0,0,207,201,1,0,0,0,207,208,1,0,0,0,208,44,1,0,0,0,209,
      210,7,2,0,0,210,46,1,0,0,0,211,215,5,34,0,0,212,214,9,0,0,0,213,212,
      1,0,0,0,214,217,1,0,0,0,215,216,1,0,0,0,215,213,1,0,0,0,216,218,1,
      0,0,0,217,215,1,0,0,0,218,219,5,34,0,0,219,48,1,0,0,0,220,222,7,3,
      0,0,221,220,1,0,0,0,222,223,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,
      0,224,225,1,0,0,0,225,226,6,24,0,0,226,50,1,0,0,0,227,231,7,4,0,0,
      228,230,7,5,0,0,229,228,1,0,0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,
      232,1,0,0,0,232,52,1,0,0,0,233,231,1,0,0,0,12,0,144,159,171,191,194,
      199,205,207,215,223,231,1,6,0,0
  ];

  static final ATN _ATN =
      ATNDeserializer().deserialize(_serializedATN);
}