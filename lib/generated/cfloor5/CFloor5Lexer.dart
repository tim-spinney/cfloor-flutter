// Generated from grammars/CFloor5.g4 by ANTLR 4.13.2
// ignore_for_file: unused_import, unused_local_variable, prefer_single_quotes
import 'package:antlr4/antlr4.dart';


class CFloor5Lexer extends Lexer {
  static final checkVersion = () => RuntimeMetaData.checkVersion('4.13.2', RuntimeMetaData.VERSION);

  static final List<DFA> _decisionToDFA = List.generate(
        _ATN.numberOfDecisions, (i) => DFA(_ATN.getDecisionState(i), i));
  static final PredictionContextCache _sharedContextCache = PredictionContextCache();
  static const int
    TOKEN_T__0 = 1, TOKEN_T__1 = 2, TOKEN_T__2 = 3, TOKEN_T__3 = 4, TOKEN_T__4 = 5, 
    TOKEN_T__5 = 6, TOKEN_T__6 = 7, TOKEN_T__7 = 8, TOKEN_T__8 = 9, TOKEN_T__9 = 10, 
    TOKEN_T__10 = 11, TOKEN_T__11 = 12, TOKEN_T__12 = 13, TOKEN_T__13 = 14, 
    TOKEN_T__14 = 15, TOKEN_T__15 = 16, TOKEN_T__16 = 17, TOKEN_T__17 = 18, 
    TOKEN_T__18 = 19, TOKEN_T__19 = 20, TOKEN_T__20 = 21, TOKEN_T__21 = 22, 
    TOKEN_T__22 = 23, TOKEN_T__23 = 24, TOKEN_T__24 = 25, TOKEN_BinaryBooleanOperator = 26, 
    TOKEN_UnaryBooleanOperator = 27, TOKEN_BooleanLiteral = 28, TOKEN_Comparator = 29, 
    TOKEN_Number = 30, TOKEN_MathOperator = 31, TOKEN_StringLiteral = 32, 
    TOKEN_WS = 33, TOKEN_Identifier = 34;
  @override
  final List<String> channelNames = [
    'DEFAULT_TOKEN_CHANNEL', 'HIDDEN'
  ];

  @override
  final List<String> modeNames = [
    'DEFAULT_MODE'
  ];

  @override
  final List<String> ruleNames = [
    'T__0', 'T__1', 'T__2', 'T__3', 'T__4', 'T__5', 'T__6', 'T__7', 'T__8', 
    'T__9', 'T__10', 'T__11', 'T__12', 'T__13', 'T__14', 'T__15', 'T__16', 
    'T__17', 'T__18', 'T__19', 'T__20', 'T__21', 'T__22', 'T__23', 'T__24', 
    'BinaryBooleanOperator', 'UnaryBooleanOperator', 'BooleanLiteral', 'Comparator', 
    'Number', 'MathOperator', 'StringLiteral', 'WS', 'Identifier'
  ];

  static final List<String?> _LITERAL_NAMES = [
      null, "'while'", "'('", "')'", "'int'", "'float'", "'string'", "'bool'", 
      "'{'", "'}'", "'if'", "'else'", "'length('", "'read_int()'", "'read_float()'", 
      "'read_string()'", "'floor'", "'ceil'", "'round'", "'sqrt'", "'sin'", 
      "'cos'", "'tan'", "';'", "'write'", "'='", null, "'not'"
  ];
  static final List<String?> _SYMBOLIC_NAMES = [
      null, null, null, null, null, null, null, null, null, null, null, 
      null, null, null, null, null, null, null, null, null, null, null, 
      null, null, null, null, "BinaryBooleanOperator", "UnaryBooleanOperator", 
      "BooleanLiteral", "Comparator", "Number", "MathOperator", "StringLiteral", 
      "WS", "Identifier"
  ];
  static final Vocabulary VOCABULARY = VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

  @override
  Vocabulary get vocabulary {
    return VOCABULARY;
  }


  CFloor5Lexer(CharStream input) : super(input) {
    interpreter = LexerATNSimulator(_ATN, _decisionToDFA, _sharedContextCache, recog: this);
  }

  @override
  List<int> get serializedATN => _serializedATN;

  @override
  String get grammarFileName => 'CFloor5.g4';

  @override
  ATN getATN() { return _ATN; }

  static const List<int> _serializedATN = [
      4,0,34,287,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
      6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
      13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
      7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
      27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,
      1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,
      4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,
      1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,
      11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
      1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
      13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
      1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,
      17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,
      1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,
      23,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,1,25,3,25,209,8,25,
      1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,
      27,224,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,
      236,8,28,1,29,3,29,239,8,29,1,29,4,29,242,8,29,11,29,12,29,243,1,29,
      3,29,247,8,29,1,29,5,29,250,8,29,10,29,12,29,253,9,29,1,29,1,29,4,
      29,257,8,29,11,29,12,29,258,3,29,261,8,29,1,30,1,30,1,31,1,31,5,31,
      267,8,31,10,31,12,31,270,9,31,1,31,1,31,1,32,4,32,275,8,32,11,32,12,
      32,276,1,32,1,32,1,33,1,33,5,33,283,8,33,10,33,12,33,286,9,33,1,268,
      0,34,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
      13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
      24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,1,0,
      6,1,0,45,45,1,0,48,57,4,0,37,37,42,43,45,45,47,47,3,0,9,10,13,13,32,
      32,1,0,97,122,2,0,95,95,97,122,302,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
      0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
      0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
      27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
      1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,
      0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,
      0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
      0,1,69,1,0,0,0,3,75,1,0,0,0,5,77,1,0,0,0,7,79,1,0,0,0,9,83,1,0,0,0,
      11,89,1,0,0,0,13,96,1,0,0,0,15,101,1,0,0,0,17,103,1,0,0,0,19,105,1,
      0,0,0,21,108,1,0,0,0,23,113,1,0,0,0,25,121,1,0,0,0,27,132,1,0,0,0,
      29,145,1,0,0,0,31,159,1,0,0,0,33,165,1,0,0,0,35,170,1,0,0,0,37,176,
      1,0,0,0,39,181,1,0,0,0,41,185,1,0,0,0,43,189,1,0,0,0,45,193,1,0,0,
      0,47,195,1,0,0,0,49,201,1,0,0,0,51,208,1,0,0,0,53,210,1,0,0,0,55,223,
      1,0,0,0,57,235,1,0,0,0,59,260,1,0,0,0,61,262,1,0,0,0,63,264,1,0,0,
      0,65,274,1,0,0,0,67,280,1,0,0,0,69,70,5,119,0,0,70,71,5,104,0,0,71,
      72,5,105,0,0,72,73,5,108,0,0,73,74,5,101,0,0,74,2,1,0,0,0,75,76,5,
      40,0,0,76,4,1,0,0,0,77,78,5,41,0,0,78,6,1,0,0,0,79,80,5,105,0,0,80,
      81,5,110,0,0,81,82,5,116,0,0,82,8,1,0,0,0,83,84,5,102,0,0,84,85,5,
      108,0,0,85,86,5,111,0,0,86,87,5,97,0,0,87,88,5,116,0,0,88,10,1,0,0,
      0,89,90,5,115,0,0,90,91,5,116,0,0,91,92,5,114,0,0,92,93,5,105,0,0,
      93,94,5,110,0,0,94,95,5,103,0,0,95,12,1,0,0,0,96,97,5,98,0,0,97,98,
      5,111,0,0,98,99,5,111,0,0,99,100,5,108,0,0,100,14,1,0,0,0,101,102,
      5,123,0,0,102,16,1,0,0,0,103,104,5,125,0,0,104,18,1,0,0,0,105,106,
      5,105,0,0,106,107,5,102,0,0,107,20,1,0,0,0,108,109,5,101,0,0,109,110,
      5,108,0,0,110,111,5,115,0,0,111,112,5,101,0,0,112,22,1,0,0,0,113,114,
      5,108,0,0,114,115,5,101,0,0,115,116,5,110,0,0,116,117,5,103,0,0,117,
      118,5,116,0,0,118,119,5,104,0,0,119,120,5,40,0,0,120,24,1,0,0,0,121,
      122,5,114,0,0,122,123,5,101,0,0,123,124,5,97,0,0,124,125,5,100,0,0,
      125,126,5,95,0,0,126,127,5,105,0,0,127,128,5,110,0,0,128,129,5,116,
      0,0,129,130,5,40,0,0,130,131,5,41,0,0,131,26,1,0,0,0,132,133,5,114,
      0,0,133,134,5,101,0,0,134,135,5,97,0,0,135,136,5,100,0,0,136,137,5,
      95,0,0,137,138,5,102,0,0,138,139,5,108,0,0,139,140,5,111,0,0,140,141,
      5,97,0,0,141,142,5,116,0,0,142,143,5,40,0,0,143,144,5,41,0,0,144,28,
      1,0,0,0,145,146,5,114,0,0,146,147,5,101,0,0,147,148,5,97,0,0,148,149,
      5,100,0,0,149,150,5,95,0,0,150,151,5,115,0,0,151,152,5,116,0,0,152,
      153,5,114,0,0,153,154,5,105,0,0,154,155,5,110,0,0,155,156,5,103,0,
      0,156,157,5,40,0,0,157,158,5,41,0,0,158,30,1,0,0,0,159,160,5,102,0,
      0,160,161,5,108,0,0,161,162,5,111,0,0,162,163,5,111,0,0,163,164,5,
      114,0,0,164,32,1,0,0,0,165,166,5,99,0,0,166,167,5,101,0,0,167,168,
      5,105,0,0,168,169,5,108,0,0,169,34,1,0,0,0,170,171,5,114,0,0,171,172,
      5,111,0,0,172,173,5,117,0,0,173,174,5,110,0,0,174,175,5,100,0,0,175,
      36,1,0,0,0,176,177,5,115,0,0,177,178,5,113,0,0,178,179,5,114,0,0,179,
      180,5,116,0,0,180,38,1,0,0,0,181,182,5,115,0,0,182,183,5,105,0,0,183,
      184,5,110,0,0,184,40,1,0,0,0,185,186,5,99,0,0,186,187,5,111,0,0,187,
      188,5,115,0,0,188,42,1,0,0,0,189,190,5,116,0,0,190,191,5,97,0,0,191,
      192,5,110,0,0,192,44,1,0,0,0,193,194,5,59,0,0,194,46,1,0,0,0,195,196,
      5,119,0,0,196,197,5,114,0,0,197,198,5,105,0,0,198,199,5,116,0,0,199,
      200,5,101,0,0,200,48,1,0,0,0,201,202,5,61,0,0,202,50,1,0,0,0,203,204,
      5,97,0,0,204,205,5,110,0,0,205,209,5,100,0,0,206,207,5,111,0,0,207,
      209,5,114,0,0,208,203,1,0,0,0,208,206,1,0,0,0,209,52,1,0,0,0,210,211,
      5,110,0,0,211,212,5,111,0,0,212,213,5,116,0,0,213,54,1,0,0,0,214,215,
      5,116,0,0,215,216,5,114,0,0,216,217,5,117,0,0,217,224,5,101,0,0,218,
      219,5,102,0,0,219,220,5,97,0,0,220,221,5,108,0,0,221,222,5,115,0,0,
      222,224,5,101,0,0,223,214,1,0,0,0,223,218,1,0,0,0,224,56,1,0,0,0,225,
      226,5,61,0,0,226,236,5,61,0,0,227,228,5,33,0,0,228,236,5,61,0,0,229,
      236,5,60,0,0,230,231,5,60,0,0,231,236,5,61,0,0,232,236,5,62,0,0,233,
      234,5,62,0,0,234,236,5,61,0,0,235,225,1,0,0,0,235,227,1,0,0,0,235,
      229,1,0,0,0,235,230,1,0,0,0,235,232,1,0,0,0,235,233,1,0,0,0,236,58,
      1,0,0,0,237,239,7,0,0,0,238,237,1,0,0,0,238,239,1,0,0,0,239,241,1,
      0,0,0,240,242,7,1,0,0,241,240,1,0,0,0,242,243,1,0,0,0,243,241,1,0,
      0,0,243,244,1,0,0,0,244,261,1,0,0,0,245,247,7,0,0,0,246,245,1,0,0,
      0,246,247,1,0,0,0,247,251,1,0,0,0,248,250,7,1,0,0,249,248,1,0,0,0,
      250,253,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,254,1,0,0,0,253,
      251,1,0,0,0,254,256,5,46,0,0,255,257,7,1,0,0,256,255,1,0,0,0,257,258,
      1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,261,1,0,0,0,260,238,1,
      0,0,0,260,246,1,0,0,0,261,60,1,0,0,0,262,263,7,2,0,0,263,62,1,0,0,
      0,264,268,5,34,0,0,265,267,9,0,0,0,266,265,1,0,0,0,267,270,1,0,0,0,
      268,269,1,0,0,0,268,266,1,0,0,0,269,271,1,0,0,0,270,268,1,0,0,0,271,
      272,5,34,0,0,272,64,1,0,0,0,273,275,7,3,0,0,274,273,1,0,0,0,275,276,
      1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,278,1,0,0,0,278,279,6,
      32,0,0,279,66,1,0,0,0,280,284,7,4,0,0,281,283,7,5,0,0,282,281,1,0,
      0,0,283,286,1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,68,1,0,0,0,
      286,284,1,0,0,0,13,0,208,223,235,238,243,246,251,258,260,268,276,284,
      1,6,0,0
  ];

  static final ATN _ATN =
      ATNDeserializer().deserialize(_serializedATN);
}